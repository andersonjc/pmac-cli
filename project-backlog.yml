metadata:
  project: PMaC Backlog Viewer
  version: 1.0.0-mvp
  last_updated: 2025-07-14
  current_sprint: foundation
  pmac_methodology: ../../project-management-as-code.md
  technical_requirements: project-requirements.md
  decision_log: prompts-log.md
  ai_instructions: ../../CLAUDE.md
phases:
  foundation:
    title: Foundation & Setup
    description: Initial project setup, configuration, and development environment
    status: ready
    estimated_duration: 1 week
    tasks:
      - id: VIEWER-001
        title: Initialize Viewer Project Structure
        status: completed
        priority: critical
        estimated_hours: 4
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Create complete directory structure in ./tools/viewer/
          - Initialize package.json with required dependencies
          - Set up Vite configuration for Svelte + TypeScript
          - Configure Tailwind CSS with dark mode support
          - Create basic HTML template with dark theme
        acceptance_criteria:
          - Directory structure matches project-requirements.md specification
          - package.json includes all required dependencies (Svelte, Vite, Tailwind)
          - Vite builds successfully with TypeScript and Svelte support
          - Tailwind CSS configured with dark mode utilities
          - Basic HTML template renders with dark background
        dependencies: []
        blocks:
          - VIEWER-002
        notes:
          - "2025-07-14 01:37:00 p.m. EDT: Starting implementation of project structure setup"
          - "2025-07-14 01:48:59 p.m. EDT: Successfully implemented complete project structure with integrated
            configuration"
      - id: VIEWER-002
        title: Create TypeScript Interfaces and Types
        status: completed
        priority: high
        estimated_hours: 3
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Define TypeScript interfaces for PMaC backlog data structure
          - Create type definitions for Task, Phase, Project metadata
          - Add types for UI state management (filters, selection)
          - Implement type-safe YAML parsing interfaces
          - Add validation types for error handling
        acceptance_criteria:
          - All backlog data structures have TypeScript interfaces
          - Type definitions match project-backlog.yml schema exactly
          - UI state types support filtering and selection
          - YAML parsing functions are type-safe
          - No TypeScript errors in strict mode
        dependencies:
          - VIEWER-001
        blocks:
          - VIEWER-003
          - VIEWER-004
        notes:
          - "2025-07-14 01:55:32 p.m. EDT: Starting TypeScript interfaces and types implementation"
          - "2025-07-14 01:59:10 p.m. EDT: Successfully implemented comprehensive TypeScript interfaces for PMaC backlog
            data"
      - id: VIEWER-003
        title: Implement YAML Parser with Validation
        status: completed
        priority: high
        estimated_hours: 4
        actual_hours: 4
        assignee: claude-code
        requirements:
          - Create parseBacklog.ts module for YAML file processing
          - Implement schema validation for project-backlog.yml format
          - Add error handling for malformed YAML files
          - Support file path resolution (relative/absolute)
          - Create data transformation functions for UI consumption
        acceptance_criteria:
          - parseBacklog.ts successfully parses valid YAML files
          - Schema validation catches malformed backlog files
          - Error messages are user-friendly and actionable
          - File path resolution works for various input formats
          - Parsed data matches TypeScript interface requirements
        dependencies:
          - VIEWER-002
        blocks:
          - VIEWER-005
          - VIEWER-006
        notes:
          - "2025-07-14 02:01:43 p.m. EDT: Starting YAML parser implementation with validation"
          - "2025-07-14 02:07:15 p.m. EDT: Successfully implemented comprehensive YAML parser with validation and error
            handling"
          - "2025-07-14 02:33:00 p.m. EDT: Completed YAML parser with validation. Resolved loading spinner issue by
            fixing Svelte DOM mounting. App now loads and displays backlog data with proper dark mode UI."
      - id: VIEWER-004
        title: Set Up Svelte Stores for State Management
        status: completed
        priority: high
        estimated_hours: 3
        actual_hours: 3
        assignee: claude-code
        requirements:
          - Create reactive stores for backlog data
          - Implement filtering stores (status, priority, phase)
          - Add selection state for task details
          - Create derived stores for computed values
          - Implement store persistence for user preferences
        acceptance_criteria:
          - Backlog data store updates reactively
          - Filter stores work independently and in combination
          - Task selection state persists across navigation
          - Derived stores calculate totals and statistics correctly
          - User preferences survive page reloads
        dependencies:
          - VIEWER-002
        blocks:
          - VIEWER-005
          - VIEWER-007
        notes:
          - "2025-07-14 02:35:00 p.m. EDT: Starting Svelte stores implementation for state management"
          - "2025-07-14 02:41:00 p.m. EDT: Completed Svelte stores implementation with reactive state management,
            filtering, and persistence"
  development:
    title: Core UI Development
    description: Main application components and user interface
    status: ready
    estimated_duration: 2 weeks
    tasks:
      - id: VIEWER-005
        title: Create Dark Mode Base Layout
        status: completed
        priority: critical
        estimated_hours: 5
        actual_hours: 5
        assignee: claude-code
        requirements:
          - Build App.svelte root component with dark theme
          - Implement sidebar navigation with phase filtering
          - Create responsive header with project title
          - Add main content area with proper spacing
          - Implement dark mode color system throughout
        acceptance_criteria:
          - App.svelte renders with bg-gray-900 background
          - Sidebar shows phase list with navigation
          - Header displays project metadata clearly
          - Layout is responsive across screen sizes
          - All text meets WCAG AA contrast requirements
        dependencies:
          - VIEWER-003
          - VIEWER-004
        blocks:
          - VIEWER-006
          - VIEWER-007
        notes:
          - "2025-07-15 10:52:00 a.m. EDT: Completed dark mode base layout implementation"
          - "2025-07-15 10:52:00 a.m. EDT: Successfully implemented responsive sidebar with phase navigation"
          - "2025-07-15 10:52:00 a.m. EDT: Added mobile-responsive design with collapsible sidebar"
          - "2025-07-15 10:52:00 a.m. EDT: Updated all color classes to use proper Tailwind dark mode colors"
          - "2025-07-15 10:52:00 a.m. EDT: All acceptance criteria met - bg-gray-900 background, sidebar navigation,
            responsive header, proper spacing, WCAG AA contrast"
      - id: VIEWER-006
        title: Build Task Card Component
        status: completed
        priority: high
        estimated_hours: 6
        actual_hours: 6
        assignee: claude-code
        requirements:
          - Create TaskCard.svelte with dark mode styling
          - Display task ID, title, status, priority, estimated hours
          - Implement status color coding (green/blue/gray/red)
          - Add priority badges with appropriate colors
          - Include hover states and click interactions
        acceptance_criteria:
          - TaskCard displays all required task information
          - Status colors match design system specification
          - Priority badges use correct dark mode colors
          - Hover states provide visual feedback
          - Click opens task detail modal
        dependencies:
          - VIEWER-003
          - VIEWER-005
        blocks:
          - VIEWER-008
          - VIEWER-009
        notes:
          - "2025-07-15 10:58:00 a.m. EDT: Started TaskCard component implementation"
          - "2025-07-15 10:58:00 a.m. EDT: Created comprehensive TaskCard.svelte with dark mode styling"
          - "2025-07-15 10:58:00 a.m. EDT: Implemented responsive card layout with grid system"
          - "2025-07-15 10:58:00 a.m. EDT: Added progress bars, dependency indicators, and hover effects"
          - "2025-07-15 10:58:00 a.m. EDT: All acceptance criteria met - displays all task info, proper colors, hover
            states, click handling"
          - "2025-07-15 10:59:00 a.m. EDT: Reopened task to fix status display and filtering issues"
          - "2025-07-15 10:59:00 a.m. EDT: Investigating in_progress status display and filter options"
          - "2025-07-15 11:01:00 a.m. EDT: Fixed status display formatting and eliminated public directory behavior"
          - "2025-07-15 11:01:00 a.m. EDT: Enhanced filter dropdown with proper capitalization"
          - "2025-07-15 11:01:00 a.m. EDT: Completed bug fixes - task now shows proper in_progress status and filter
            works correctly"
          - "2025-07-15 11:22:29 a.m. EDT: Fixed status display and eliminated public directory behavior"
      - id: VIEWER-007
        title: Create Phase Group Component
        status: completed
        priority: high
        estimated_hours: 4
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Build PhaseGroup.svelte for organizing tasks by phase
          - Implement collapsible phase sections
          - Add phase progress indicators and statistics
          - Display phase title, description, and task count
          - Create task filtering within phases
        acceptance_criteria:
          - PhaseGroup displays phase metadata clearly
          - Collapsible sections work smoothly
          - Progress indicators show completion percentage
          - Task filtering works within phase scope
          - Design matches dark mode specification
        dependencies:
          - VIEWER-004
          - VIEWER-005
        blocks:
          - VIEWER-008
        notes:
          - "2025-07-15 12:17:56 p.m. EDT: Starting Phase Group Component implementation"
          - "2025-07-15 03:50:44 p.m. EDT: Phase Group Component implementation complete with collapsible sections,
            progress indicators, and store integration"
          - "2025-07-15 03:50:55 p.m. EDT: Implementation Details: Created PhaseGroup.svelte component with collapsible
            sections using Svelte transitions, progress indicators with SVG rings, task statistics breakdown, and
            integrated with stores for persistence. Added collapsedPhases store with localStorage persistence and
            tasksByPhase derived store for efficient data management. Updated App.svelte to use phase groups instead of
            flat task list. Added runAllTests function to parseBacklog.test.ts for demo functionality. All acceptance
            criteria met: collapsible sections work smoothly, progress indicators show completion percentage, task
            filtering works within phase scope, and design matches dark mode specification."
      - id: VIEWER-008
        title: Implement Task Detail Modal
        status: completed
        priority: high
        estimated_hours: 5
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Create TaskDetail.svelte modal component
          - Display complete task information and metadata
          - Show requirements, acceptance criteria, and dependencies
          - Implement syntax highlighting for code blocks
          - Add modal backdrop and close functionality
        acceptance_criteria:
          - Modal opens when task card is clicked
          - All task details are displayed clearly
          - Requirements and criteria are well-formatted
          - Syntax highlighting works for code blocks
          - Modal can be closed with ESC key or backdrop click
        dependencies:
          - VIEWER-006
          - VIEWER-007
        blocks:
          - VIEWER-010
        notes:
          - "2025-07-15 04:06:34 p.m. EDT: Starting Task Detail Modal implementation to fix task card click interactions"
          - "2025-07-15 04:08:36 p.m. EDT: Task Detail Modal implementation complete - task cards now open full detail
            modals with all task information"
          - "2025-07-15 04:08:48 p.m. EDT: Implementation Details: Created TaskDetail.svelte modal component with full
            task information display including progress tracking, dependency visualization, requirements/acceptance
            criteria with syntax highlighting, and complete task history. Added modal state management to stores with
            openTaskDetail/closeTaskDetail functions. Updated App.svelte handleTaskClick to use modal instead of
            console.log. Modal features: ESC key close, backdrop click close, responsive design, dark mode styling,
            progress bars, dependency badges, code highlighting, and comprehensive task metadata display. All acceptance
            criteria met: modal opens on task card click, displays all task details clearly, includes syntax
            highlighting, modal can be closed with ESC/backdrop. Task cards now fully functional with rich detail view."
      - id: VIEWER-009
        title: Create Backlog Overview Component
        status: completed
        priority: medium
        estimated_hours: 4
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Build BacklogOverview.svelte for project statistics
          - Display total tasks, hours, and completion percentage
          - Show phase breakdown and progress visualization
          - Add project metadata and timeline information
          - Implement responsive card layout
        acceptance_criteria:
          - Overview shows accurate project statistics
          - Phase breakdown displays progress clearly
          - Timeline information is formatted appropriately
          - Cards adapt to different screen sizes
          - All content follows dark mode design system
        dependencies:
          - VIEWER-006
        blocks:
          - VIEWER-011
        notes:
          - "2025-07-15 04:29:11 p.m. EDT: Starting Backlog Overview Component implementation with project statistics
            and phase breakdown"
          - "2025-07-15 04:31:06 p.m. EDT: BacklogOverview component complete with responsive card layout, project
            statistics, phase breakdown, timeline info, and dark mode styling - all acceptance criteria met"
      - id: VIEWER-010
        title: Build Critical Path Visualization
        status: completed
        priority: high
        estimated_hours: 8
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Create CriticalPath.svelte with SVG-based visualization
          - Implement dependency graph calculation algorithm
          - Add interactive nodes with hover details
          - Highlight critical path with glowing effect
          - Support zoom and pan for large projects
        acceptance_criteria:
          - SVG renders dependency graph accurately
          - Critical path is highlighted visually
          - Interactive nodes show task details on hover
          - Zoom and pan functionality works smoothly
          - Graph layout handles complex dependencies
        dependencies:
          - VIEWER-008
        blocks:
          - VIEWER-012
        notes:
          - "2025-07-15 04:16:22 p.m. EDT: Starting Critical Path Visualization implementation - SVG-based dependency
            graph with interactive features"
          - "2025-07-15 04:19:52 p.m. EDT: Integrating CriticalPath component into App.svelte and testing visualization"
          - "2025-07-15 04:23:32 p.m. EDT: Critical path visualization component complete with left-to-right layout and
            collapsible section following established pattern"
          - "2025-07-15 04:23:43 p.m. EDT: All acceptance criteria met: SVG dependency graph with left-to-right layout,
            critical path highlighting, interactive hover tooltips, zoom/pan functionality, and collapsible section
            following established UI patterns"
      - id: VIEWER-011
        title: Implement Task Filtering and Search
        status: completed
        priority: medium
        estimated_hours: 5
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Add filter controls for status, priority, and phase
          - Implement text search across task titles and descriptions
          - Create filter state management with URL persistence
          - Add clear filters functionality
          - Implement filter combination logic
        acceptance_criteria:
          - Filter controls work independently and in combination
          - Text search highlights matching results
          - Filter state persists in URL for sharing
          - Clear filters resets to default view
          - Filter performance is smooth with large backlogs
        dependencies:
          - VIEWER-009
        blocks:
          - VIEWER-013
        notes:
          - "2025-07-15 04:38:05 p.m. EDT: Starting task filtering and search implementation with enhanced FilterPanel
            and URL state persistence"
          - "2025-07-15 04:39:57 p.m. EDT: Task filtering and search implementation complete with enhanced dark mode
            FilterPanel, URL state persistence, and comprehensive filter combination logic - all acceptance criteria
            met"
  advanced:
    title: Advanced Features
    description: Enhanced functionality and polish
    status: ready
    estimated_duration: 1 week
    tasks:
      - id: VIEWER-012
        title: Create Dependency Graph Component
        status: ready
        priority: medium
        estimated_hours: 6
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Build DependencyGraph.svelte for interactive visualization
          - Implement force-directed graph layout
          - Add task relationship visualization
          - Create interactive node selection
          - Support graph filtering and highlighting
        acceptance_criteria:
          - Graph shows task relationships clearly
          - Force-directed layout prevents node overlap
          - Interactive selection highlights related tasks
          - Graph filtering works with main task filters
          - Performance is acceptable for large projects
        dependencies:
          - VIEWER-010
        blocks: []
        notes:
          - "2025-07-15 05:25:52 p.m. EDT: Deprioritized in favor of responsive design - will implement after core
            functionality complete"
          - "2025-07-15: Blocks updated to: none"
      - id: VIEWER-013
        title: Build Risk Assessment Panel
        status: ready
        priority: low
        estimated_hours: 4
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Create RiskPanel.svelte for risk visualization
          - Display risk categories with color coding
          - Show risk impact and probability indicators
          - Implement risk mitigation display
          - Add risk filtering and sorting
        acceptance_criteria:
          - Risk panel displays all risk categories
          - Color coding matches severity levels
          - Impact and probability are clearly shown
          - Mitigation strategies are accessible
          - Risk filtering works with overall app filters
        dependencies:
          - VIEWER-011
        blocks: []
        notes:
          - "2025-07-15 05:25:59 p.m. EDT: Deprioritized in favor of responsive design - will implement after core
            functionality complete"
          - "2025-07-15: Blocks updated to: none"
      - id: VIEWER-014
        title: Add Responsive Design and Mobile Support
        status: completed
        priority: medium
        estimated_hours: 5
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Implement responsive breakpoints for mobile/tablet
          - Adapt sidebar navigation for smaller screens
          - Fix phase navigation functionality in sidebar
          - Optimize touch interactions for mobile
          - Test critical path visualization on mobile
          - Add mobile-specific UI improvements
        acceptance_criteria:
          - App works well on mobile devices (iOS/Android)
          - Sidebar collapses appropriately on small screens
          - Touch interactions are responsive and intuitive
          - Critical path visualization adapts to mobile
          - No horizontal scrolling on mobile devices
        dependencies:
          - VIEWER-011
        blocks:
          - VIEWER-016
        notes:
          - "2025-07-15: Dependencies updated to: VIEWER-011"
          - "2025-07-15 05:26:15 p.m. EDT: Adding phase navigation functionality requirement: Make sidebar phase
            navigation functional - clicking phases should filter/navigate to phase content"
          - "2025-07-15: Requirements updated (6 items)"
          - "2025-07-16 02:53:36 p.m. EDT: Starting responsive design implementation with phase navigation fixes"
          - "2025-07-16 02:58:36 p.m. EDT: 2025-07-16 15:00:00 p.m. EDT: Responsive design implementation completed.
            Enhanced CriticalPath component with dynamic sizing and touch support. Added touch pan/zoom with pinch
            gestures. Improved mobile layout with better breakpoints and touch-friendly interactions. All acceptance
            criteria met: app works on mobile, sidebar collapses properly, touch interactions responsive, critical path
            adapts to mobile, no horizontal scrolling."
          - "2025-07-16 02:58:48 p.m. EDT: All acceptance criteria validated: responsive design works on mobile, sidebar
            collapses properly, touch interactions are responsive, critical path adapts to mobile, no horizontal
            scrolling"
          - "2025-07-16 03:13:46 p.m. EDT: Mobile viewport overflow fixes implemented - added proper layout constraints,
            text wrapping, and viewport controls throughout component hierarchy"
  integration:
    title: PMaC CLI Integration
    description: Integration with existing PMaC CLI tool
    status: ready
    estimated_duration: 1 week
    tasks:
      - id: VIEWER-015
        title: Extend PMaC CLI with Viewer Command
        status: completed
        priority: critical
        estimated_hours: 6
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Add viewer subcommand to existing PMaC CLI
          - Implement file path validation and resolution
          - Add development server spawning
          - Create static build generation
          - Add help documentation for viewer commands
        acceptance_criteria:
          - '"pnpm pmac viewer" launches viewer for current directory'
          - '"pnpm pmac viewer [path]" works with custom paths'
          - '"pnpm pmac viewer --build" generates static build'
          - '"pnpm pmac viewer --serve" serves built version'
          - Help documentation is clear and complete
        dependencies:
          - VIEWER-014
        blocks:
          - VIEWER-016
        notes:
          - "2025-07-15: Dependencies updated to: VIEWER-014"
          - "2025-07-16 02:49:02 p.m. EDT: 2025-07-16 14:47:00 p.m. EDT: Implemented blocked status detection for
            dependency-based UI state management. Tasks now display as blocked when their dependencies are not
            completed, regardless of their data status. Added visual indicators including lock icons, dependency
            notices, and enhanced styling for blocked tasks. VIEWER-015 now correctly shows as blocked since VIEWER-014
            is not completed."
          - "2025-07-16 02:51:23 p.m. EDT: 2025-07-16 14:51:00 p.m. EDT: Enhanced filter functionality to include
            blocked status as a filter option. Users can now filter tasks by blocked status to see only tasks that are
            blocked by incomplete dependencies. Updated filterOptions store to use effective status for filter options."
          - "2025-07-16 03:13:52 p.m. EDT: Starting PMaC Viewer integration and cleanup phase"
          - "2025-07-16 03:20:49 p.m. EDT: PMaC CLI viewer command implementation completed - supports dev/build modes,
            file path validation, and automatic viewer configuration"
      - id: VIEWER-016
        title: Implement Error Handling and Validation
        status: completed
        priority: high
        estimated_hours: 4
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Add comprehensive error handling for invalid YAML
          - Implement user-friendly error messages
          - Create fallback UI for missing data
          - Add file watching for live updates
          - Implement graceful degradation
        acceptance_criteria:
          - Invalid YAML files show helpful error messages
          - Missing files display appropriate fallback UI
          - File changes trigger automatic updates
          - App handles partial data gracefully
          - Error states don't break the entire application
        dependencies:
          - VIEWER-014
          - VIEWER-015
        blocks:
          - VIEWER-017
        notes:
          - "2025-07-16 03:20:55 p.m. EDT: Starting error handling and validation improvements"
          - "2025-07-16 03:26:43 p.m. EDT: Comprehensive error handling and validation implementation completed -
            enhanced YAML parsing, user-friendly error UI, partial data handling, and graceful degradation"
  testing:
    title: Testing & Quality Assurance
    description: Comprehensive testing and quality validation
    status: ready
    estimated_duration: 4 days
    tasks:
      - id: VIEWER-017
        title: Implement Component Testing Suite
        status: ready
        priority: low
        estimated_hours: 8
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Set up Vitest testing framework
          - Create unit tests for all Svelte components
          - Test YAML parsing and validation functions
          - Add integration tests for user workflows
          - Implement test coverage reporting
        acceptance_criteria:
          - All components have comprehensive unit tests
          - YAML parsing functions are fully tested
          - Integration tests cover critical user paths
          - Test coverage exceeds 90% for business logic
          - Tests pass consistently in CI environment
        dependencies:
          - VIEWER-016
        blocks:
          - VIEWER-018
        notes:
          - "2025-07-17 11:28:17 a.m. EDT: Deprioritized for MVP release - moved to low priority"
      - id: VIEWER-018
        title: Performance Testing and Optimization
        status: ready
        priority: low
        estimated_hours: 5
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Benchmark parsing performance with large YAML files
          - Test UI responsiveness with complex dependency graphs
          - Optimize bundle size and load times
          - Add performance regression testing
          - Implement lazy loading for large datasets
        acceptance_criteria:
          - YAML parsing completes under 500ms for typical files
          - UI remains responsive with 100+ tasks
          - Bundle size is under 500KB compressed
          - Performance tests prevent regressions
          - Large projects load incrementally
        dependencies:
          - VIEWER-017
        blocks:
          - VIEWER-019
        notes:
          - "2025-07-17 11:28:23 a.m. EDT: Deprioritized for MVP release - moved to low priority"
  deployment:
    title: Deployment & Documentation
    description: Final deployment and documentation
    status: ready
    estimated_duration: 3 days
    tasks:
      - id: VIEWER-019
        title: Create User Documentation
        status: completed
        priority: high
        estimated_hours: 4
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Write comprehensive README for viewer, separate from main project README
          - Create user guide with screenshots, prioritizing local usage vs deployment to a remote environment
          - Document CLI integration commands
          - Add troubleshooting guide
          - Create developer contribution guide as part of README
        acceptance_criteria:
          - README explains installation and usage clearly
          - User guide includes visual examples
          - CLI commands are fully documented
          - Troubleshooting covers common issues
          - Contribution guide enables future development
        dependencies:
          - VIEWER-016
        blocks:
          - VIEWER-020
        notes:
          - "2025-07-17: Dependencies updated to: VIEWER-016"
          - "2025-07-17 11:28:53 a.m. EDT: Starting user documentation for MVP release"
          - "2025-07-17 11:32:41 a.m. EDT: Comprehensive user documentation created - README with installation, usage,
            troubleshooting, and developer guide complete"
      - id: VIEWER-020
        title: Package and Distribution Setup
        status: ready
        priority: low
        estimated_hours: 3
        actual_hours: 0
        assignee: claude-code
        requirements:
          - Configure package.json for NPM distribution
          - Set up build pipeline for production
          - Add version management and changelog
          - Create installation and update procedures
          - Test distribution package locally
        acceptance_criteria:
          - Package builds successfully for distribution
          - Version management follows semantic versioning
          - Changelog documents all features and changes
          - Installation process is straightforward
          - Package installs and runs correctly
        dependencies:
          - VIEWER-019
        blocks: []
        notes:
          - "2025-07-17 11:28:29 a.m. EDT: Deprioritized for MVP release - moved to low priority"
epic_summary:
  total_estimated_hours: 94
  estimated_duration: 4-5 weeks
  critical_path:
    - VIEWER-001 → VIEWER-002 → VIEWER-003 → VIEWER-005 → VIEWER-006 → VIEWER-008 → VIEWER-010 → VIEWER-014 → VIEWER-015
      → VIEWER-016 → VIEWER-019
  success_criteria:
    technical:
      - Dark mode Svelte application with responsive design
      - YAML parsing with validation and error handling
      - Interactive task visualization with filtering
      - Critical path analysis with dependency graph
      - PMaC CLI integration with subcommands
      - Comprehensive user documentation for MVP release
    business:
      - Intuitive interface for PMaC methodology users
      - Seamless integration with existing PMaC workflow
      - Professional visual design suitable for developer tools
      - Documentation enables easy adoption and contribution
    pmac_methodology:
      - Complete development audit trail in Git + prompt logs
      - All requirements traceable from prompts → tasks → code
      - Project Management as Code proven effective for viewer development
      - Documentation enables future viewer enhancements
risks:
  high:
    - risk: SVG dependency graph performance with large projects
      mitigation: Implement virtualization and lazy loading for complex graphs
    - risk: Mobile responsiveness complexity for data-heavy interface
      mitigation: Progressive enhancement approach with mobile-first design
  medium:
    - risk: PMaC CLI integration complexity
      mitigation: Early integration testing and clear interface definition
    - risk: TypeScript compilation complexity with Svelte
      mitigation: Use proven Vite + Svelte TypeScript configuration
  low:
    - risk: Tailwind CSS bundle size impact
      mitigation: Use Tailwind's purge/JIT mode for production builds
    - risk: Cross-browser compatibility issues
      mitigation: Focus on modern browsers with documented requirements
